# -*- coding: utf-8 -*-
"""modelsBuilding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-kJI94IUVND-DAAcUC5KoSbwulpNNB1
"""



"""## IMPORT LIBRARIES

"""

import pandas as pd

"""## LOAD DATASET"""

df=pd.read_csv("/content/sample_data/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df

"""### NAV ON DATASET"""

df.shape
df.isnull().sum()
df.duplicated().sum()
df.info()
df.describe(include='O')

df=df.drop(columns=['customerID','MonthlyCharges', 'tenure','TotalCharges'],axis=1)

"""## USING LABELENCODER TO CHANGE STRING TO NUMERICS IN CHURN COLUMN"""

from sklearn.preprocessing import LabelEncoder
li=LabelEncoder()
df["Churn"]=li.fit_transform(df["Churn"])
df["Churn"]

"""## EDA ANALYSIS"""

X=df.drop("Churn",axis=1)
X
y=df["Churn"]
y

df["Churn"].value_counts()

X.nunique()

"""## CATEGORICAL TO NUMERIC"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

cat_features=['gender', 'SeniorCitizen', 'Partner', 'Dependents',
        'PhoneService', 'MultipleLines', 'InternetService',
       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',
       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
       'PaymentMethod']
one_hot=OneHotEncoder()
transformer=ColumnTransformer([("one_hot",one_hot,cat_features)],
                            remainder="passthrough")
transformed_X=transformer.fit_transform(X)
print(pd.DataFrame(transformed_X))

"""## DATA SPLITTING"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(transformed_X,
                                               y,test_size=0.2)

"""# RANDOM FOREST

## TRAINING MODEL
"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier
rf=RandomForestRegressor()
rf.fit(X_train,y_train)

"""## APPLYING THE MODEL TO MAKE PREDICTIONS"""

y_rf_train_pred=rf.predict(X_train)
y_rf_test_pred=rf.predict(X_test)
print(y_rf_train_pred)
print(y_rf_test_pred)

"""## Evaluation of the Model Performance"""

from sklearn.metrics import mean_squared_error,r2_score

y_rf_train_mse=mean_squared_error(y_train,y_rf_train_pred)
y_rf_train_r2=r2_score(y_train,y_rf_train_pred)

y_rf_test_mse=mean_squared_error(y_test,y_rf_test_pred)
y_rf_test_r2=r2_score(y_test,y_rf_test_pred)

y_rf_results=pd.DataFrame(['Random Forest',y_rf_train_mse,y_rf_train_r2,
                         y_rf_test_mse,y_rf_test_r2]).transpose()
y_rf_results.columns=['Model','Training MSE','Training R2','Test MSE','Test R2']
print(y_rf_results)

"""# LINEAR REGRESSION

## TRAINING MODEL
"""

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(X_train,y_train)

"""## APPLYING THE MODEL TO DO PREDICTIONS"""

y_lr_train_pred=lr.predict(X_train)
y_lr_test_pred=lr.predict(X_test)
print(y_lr_train_pred)
print(y_lr_test_pred)
print(lr.score(X_train,y_train))
print(lr.score(X_test,y_test))

"""## Evaluation of the Model Performance"""

from sklearn.metrics import mean_squared_error,r2_score

y_lr_train_mse=mean_squared_error(y_train,y_lr_train_pred)
y_lr_train_r2=r2_score(y_train,y_lr_train_pred)

y_lr_test_mse=mean_squared_error(y_test,y_lr_test_pred)
y_lr_test_r2=r2_score(y_test,y_lr_test_pred)

y_lr_results=pd.DataFrame(['Random Forest',y_lr_train_mse,y_lr_train_r2,y_lr_test_mse,
                         y_lr_test_r2]).transpose()
y_lr_results.columns=['Model','Training MSE','Training R2','Test MSE','Test R2']
print(y_lr_results)